from __future__ import division, absolute_import, print_function
import pytest
import sys

def test_resp_1():
    import psi4
    import resp
    import numpy as np

    mol = psi4.geometry(""" C1    0.000   0.000   0.000
    H11   -0.291   0.530   0.918
    H12   -0.371   0.524  -0.907
     O1   -0.536  -1.326  -0.000
    HO1   -1.481  -1.292  -0.000
     C2    1.560   0.000   0.000
     H2    1.923  -0.524  -0.908
     O2    2.033  -0.671   1.162
    HO2    1.638  -0.112   1.845
     C3    2.069   1.443   0.000
     H3    1.644   1.951  -0.986
     O3    1.611   2.147   1.154
    HO3    0.634   2.064   1.004
     C4    3.605   1.470   0.000
     H4    4.053   0.975   0.870
     O4    4.141   0.832  -1.120
    HO4    3.798  -0.098  -1.047
     C5    4.109   2.917  -0.000
     H5    3.691   3.393  -0.956
     O5    3.668   3.622   1.123
    HO5    2.744   3.600   1.075
     C6    5.641   2.904   0.000
    H61    5.937   2.398   0.872
    H62    5.935   2.389  -0.888
     O6    6.057   4.335  -0.000
    HO6    7.006   4.482   0.000 """)

    mol.update_geometry()

    lp =    """ LP1A  -0.502  -1.441  -0.329
    LP1B  -0.502  -1.441   0.329
    LP2A   1.830  -0.954   1.198
    LP2B   2.367  -0.575   1.198
    LP3A   1.647   1.924   1.422
    LP3B   1.652   2.487   1.080
    LP4A   3.945   0.939  -1.390
    LP4B   4.476   0.771  -1.040
    LP5A   3.705   3.403   1.393
    LP5B   3.710   3.961   1.045
    LP6A   6.011   4.446  -0.329
    LP6B   6.011   4.446   0.329"""


    options = {'N_VDW_LAYERS'       : 4,
               'VDW_SCALE_FACTOR'   : 1.4,
               'VDW_INCREMENT'      : 0.2,
               'VDW_POINT_DENSITY'  : 1.0,
               'resp_a'             : 0.0005,
               'RESP_B'             : 0.1,
               'LPCOOR'             : lp
               }

    # Call for first stage fit
    charges1 = resp.resp([mol], [options])
    print('Electrostatic Potential Charges')
    print(charges1[0][0])
    print('Restrained Electrostatic Potential Charges')
    print(charges1[0][1])
    # Reference charges are generated by the R.E.D.-III.5 tools
    # with GAMESS as the quantum chemistry package
 #   reference_charges1 = np.array([-0.294974,  0.107114,  0.107114,  0.084795,
#                                    0.803999, -0.661279,  0.453270, -0.600039, 0.0, 0.0])
    sys.exit()
    print('Reference RESP Charges')
    print(reference_charges1)
    print('Difference')
    print(charges1[0][1]-reference_charges1)

#    sys.exit()
#    assert np.allclose(charges1[0][1], reference_charges1, atol=5e-4)
    
    # Change the value of the RESP parameter A
    options['resp_a'] = 0.001

    # Add constraint for atoms fixed in second stage fit
    constraint_charge = []
    for i in range(4, 8):
        constraint_charge.append([charges1[0][1][i], [i+1]])
    options['constraint_charge'] = constraint_charge
    options['constraint_group'] = [[2, 3, 4]]
    options['grid'] = '1_%s_grid.dat' %mol.name()
    options['esp'] = '1_%s_grid_esp.dat' %mol.name()
    mol.set_name('stage2')

    # Call for second stage fit
    charges2 = resp.resp([mol], [options])

    # Get RESP charges
    print("\nStage Two:\n")
    print('RESP Charges')
    print(charges2[0][1])
    reference_charges2 = np.array([-0.290893,  0.098314,  0.098314,  0.098314,
                                   0.803999, -0.661279,  0.453270, -0.600039])
    print('Reference RESP Charges')
    print(reference_charges2)
    print('Difference')
    print(charges2[0][1]-reference_charges2)

    assert np.allclose(charges2[0][1], reference_charges2, atol=5e-4)
test_resp_1()

def test_resp_2():
    import psi4
    import resp
    import numpy as np

    # Initialize two different conformations of ethanol
    geometry = """C    0.00000000  0.00000000  0.00000000
    C    1.48805540 -0.00728176  0.39653260
    O    2.04971655  1.37648153  0.25604810
    H    3.06429978  1.37151670  0.52641124
    H    1.58679428 -0.33618761  1.43102358
    H    2.03441010 -0.68906454 -0.25521028
    H   -0.40814044 -1.00553466  0.10208540
    H   -0.54635470  0.68178278  0.65174288
    H   -0.09873888  0.32890585 -1.03449097
    """
    mol1 = psi4.geometry(geometry)
    mol1.update_geometry()
    mol1.set_name('conformer1')

    geometry = """C    0.00000000  0.00000000  0.00000000
    C    1.48013500 -0.00724300  0.39442200
    O    2.00696300  1.29224100  0.26232800
    H    2.91547900  1.25572900  0.50972300
    H    1.61500700 -0.32678000  1.45587700
    H    2.07197500 -0.68695100 -0.26493400
    H   -0.32500012  1.02293415 -0.30034094
    H   -0.18892141 -0.68463906 -0.85893815
    H   -0.64257065 -0.32709111  0.84987482
    """
    mol2 = psi4.geometry(geometry)
    mol2.update_geometry()
    mol2.set_name('conformer2')

    molecules = [mol1, mol2]

    # Specify intermolecular constraints
    intermolecular_constraint = {'EQUAL': [[[1, range(1, 10)], [2, range(1, 10)]]]}

    # Specify options
    options1 = {'N_VDW_LAYERS'       : 4,
               'VDW_SCALE_FACTOR'   : 1.4,
               'VDW_INCREMENT'      : 0.2,
               'VDW_POINT_DENSITY'  : 1.0,
               'resp_a'             : 0.0005,
               'RESP_B'             : 0.1,
               'restraint'          : True,
               'ihfree'             : False,
               'WEIGHT'             : 1,
               }
    options2 = {'WEIGHT': 1}
    options = [options1, options2]

    # Call for first stage fit
    charges1 = resp.resp(molecules, options, intermolecular_constraint)

    print("Restrained Electrostatic Potential Charges")
    print(charges1[0][1])
    # Reference Charges are generates with the resp module of Ambertools
    # Grid and ESP values are from this code with Psi4
    reference_charges1 = np.array([-0.149134, 0.274292, -0.630868,  0.377965, -0.011016,
                                   -0.009444,  0.058576,  0.044797,  0.044831])
    print("Reference RESP Charges")
    print(reference_charges1)
    print("Difference")
    print(charges1[0][1]-reference_charges1)

    assert np.allclose(charges1[0][1], reference_charges1, atol=1e-5)

    # Add constraint for atoms fixed in second stage fit
    stage2 = resp.stage2_helper()
    for mol in range(len(molecules)):
        print(mol, charges1[mol][1], options[mol])
        stage2.set_stage2_constraint(molecules[mol], charges1[mol][1], options[mol], cutoff=1.2)
        options[mol]['grid'] = '%i_%s_grid.dat' %(mol+1, molecules[mol].name())
        options[mol]['esp'] = '%i_%s_grid_esp.dat' %(mol+1, molecules[mol].name())
        options[0]['resp_a'] = 0.001
        molecules[mol].set_name('conformer' + str(mol+1) + '_stage2')

    # Add intermolecular constraints
    stage2.stage2_intermolecular_constraint(molecules, cutoff=1.2)

    # Call for second stage fit
    print(molecules)
    print(options)
    print(stage2.intermolecular_constraint)
    charges2 = resp.resp(molecules, options, stage2.intermolecular_constraint)
    print("\nStage Two\n")
    print("RESP Charges")
    print(charges2[0][1])
    reference_charges2 = np.array([-0.079853, 0.253918, -0.630868, 0.377965, -0.007711,
                                   -0.007711, 0.031420,  0.031420, 0.031420,0.0,0.0])
    print("Reference RESP Charges")
    print(reference_charges2)
    print("Difference")
    print(charges2[0][1]-reference_charges2)

    assert np.allclose(charges2[0][1], reference_charges2, atol=1e-5)
