from __future__ import division, absolute_import, print_function
import pytest
import sys

def test_resp_1():
    import psi4
    import resp
    import numpy as np

    mol = psi4.geometry(""" C1    0.000   0.000   0.000
    H11   -0.291   0.530   0.918
    H12   -0.371   0.524  -0.907
     O1   -0.536  -1.326  -0.000
    H1   -1.481  -1.292  -0.000
     C2    1.560   0.000   0.000
     H2    1.923  -0.524  -0.908
     O2    2.033  -0.671   1.162
    H2    1.638  -0.112   1.845
     C3    2.069   1.443   0.000
     H3    1.644   1.951  -0.986
     O3    1.611   2.147   1.154
    H3    0.634   2.064   1.004
     C4    3.605   1.470   0.000
     H4    4.053   0.975   0.870
     O4    4.141   0.832  -1.120
    H4    3.798  -0.098  -1.047
     C5    4.109   2.917  -0.000
     H5    3.691   3.393  -0.956
     O5    3.668   3.622   1.123
    H    2.744   3.600   1.075
     C6    5.641   2.904   0.000
    H61    5.937   2.398   0.872
    H62    5.935   2.389  -0.888
     O6    6.057   4.335  -0.000
    H    7.006   4.482   0.000 """)

    mol.update_geometry()

    lp =    """ LP1A  -0.502  -1.441  -0.329
    LP1B  -0.502  -1.441   0.329
    LP2A   1.830  -0.954   1.198
    LP2B   2.367  -0.575   1.198
    LP3A   1.647   1.924   1.422
    LP3B   1.652   2.487   1.080
    LP4A   3.945   0.939  -1.390
    LP4B   4.476   0.771  -1.040
    LP5A   3.705   3.403   1.393
    LP5B   3.710   3.961   1.045
    LP6A   6.011   4.446  -0.329
    LP6B   6.011   4.446   0.329"""


    options = {'N_VDW_LAYERS'       : 4,
               'VDW_SCALE_FACTOR'   : 1.4,
               'VDW_INCREMENT'      : 0.2,
               'VDW_POINT_DENSITY'  : 1.0,
               'resp_a'             : 0.0005,
               'RESP_B'             : 0.1,
               'LPCOOR'             : lp
               }

    # Call for first stage fit
    charges1 = resp.resp([mol], [options])
    print('Electrostatic Potential Charges')
    print(charges1[0][0])
    print('Restrained Electrostatic Potential Charges')
    print(charges1[0][1])
    # Reference charges are generated by the R.E.D.-III.5 tools
    # with GAMESS as the quantum chemistry package
 #   reference_charges1 = np.array([-0.294974,  0.107114,  0.107114,  0.084795,
#                                    0.803999, -0.661279,  0.453270, -0.600039, 0.0, 0.0])
#    sys.exit()
    # Call for second stage fit
    stage2=resp.stage2_helper()
    stage2.set_stage2_constraint(mol,charges1[0][1],options,cutoff=1.2)
    options['resp_a'] = 0.001
    options['grid'] = '1_%s_grid.dat' %mol.name()
    options['esp'] = '1_%s_grid_esp.dat' %mol.name()
    mol.set_name('stage2')
    if options.get('constraint_group')==[]:
       print('Stage1 equals Stage2')
    else:
       charges2 = resp.resp([mol], [options]) 
       print('RESP Charges')
       print(charges2[0][1])

test_resp_1()

